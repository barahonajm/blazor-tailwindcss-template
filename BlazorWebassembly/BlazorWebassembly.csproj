<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <styles Include="styles.css" />
    <Watch Include="$(OutDir)wwwroot\styles.css" StaticWebAssetPath="$(OutDir)wwwroot\styles.css" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="6.0.0-rc.1.21452.15" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="6.0.0-rc.1.21452.15" PrivateAssets="all" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" Condition="!Exists('$(MSBuildProjectDirectory)\node_modules')">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
  </Target>

  <!-- If package-lock.json does not exists, perform an NPM install -->
  <Target Name="NpmInstall" AfterTargets="DebugEnsureNodeEnv" Condition="!Exists('$(MSBuildProjectDirectory)\package-lock.json')">
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec Command="npm i" WorkingDirectory="$(MSBuildProjectDirectory)\" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)\package-lock.json" DestinationFolder="$(BaseIntermediateOutputPath)" SkipUnchangedFiles="true"/>
  </Target>

  <!-- If node_modules does not exists, perform an NPM clean install -->
  <Target Name="NodeModulesInstall" AfterTargets="DebugEnsureNodeEnv" Condition="!Exists('$(MSBuildProjectDirectory)\node_modules')">
    <Message Importance="high" Text="Restoring node_modules using 'npm'. This may take several minutes..." />
    <Exec Command="npm ci --also=dev" WorkingDirectory="$(MSBuildProjectDirectory)\" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)\package-lock.json" DestinationFolder="$(BaseIntermediateOutputPath)" SkipUnchangedFiles="true" />
  </Target>

  <!-- If package-lock.json has changed, perform an NPM clean install -->
  <Target Name="NpmCleanInstall" AfterTargets="DebugEnsureNodeEnv" DependsOnTargets="NodeModulesInstall" Inputs="$(MSBuildProjectDirectory)\package-lock.json" Outputs="$(BaseIntermediateOutputPath)package-lock.json">
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec Command="npm ci --also=dev" WorkingDirectory="$(MSBuildProjectDirectory)\" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)\package-lock.json" DestinationFolder="$(BaseIntermediateOutputPath)" SkipUnchangedFiles="true"/>
  </Target>

  <Target Name="PostScopedCssCompile" AfterTargets="_GenerateScopedCssFiles" DependsOnTargets="DebugEnsureNodeEnv">
    <Message Importance="high" Text="Building scoped css..." />
    <Exec Command="npx postcss %22@(_ScopedCssOutputs, '%22 %22')%22 --replace" WorkingDirectory="$(MSBuildProjectDirectory)" EnvironmentVariables="TAILWIND_MODE=build" />
  </Target>

  <Target Name="PostStylesCssCompile" AfterTargets="Build">
    <Message Importance="high" Text="BUG: If you are on running only dotnet build, a process is going to appear as a new console, feel free to close it." />
    <Message Importance="high" Text="Watching sytles css.." />
    <ExecAsync  Command="npx" Arguments="postcss @(styles, ' ') --base . --dir $(OutDir)wwwroot --watch --verbose --poll" WorkingDirectory="$(MSBuildProjectDirectory)" EnvironmentVariables="watch" />
  </Target>

  <UsingTask
    TaskName="ExecAsync"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Command ParameterType="System.String" Required="true" />
      <Arguments ParameterType="System.String" Required="true" />
      <WorkingDirectory ParameterType="System.String" Required="true" />
      <EnvironmentVariables ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Diagnostics"/>
      <Using Namespace="System.Threading"/>
      <Code Type="Fragment" Language="cs">
<![CDATA[
System.Environment.SetEnvironmentVariable("TAILWIND_MODE", EnvironmentVariables, EnvironmentVariableTarget.User);
ProcessStartInfo startInfo = new ProcessStartInfo(Command);
startInfo.Arguments = Arguments;
startInfo.WorkingDirectory = WorkingDirectory;
startInfo.UseShellExecute = true;
startInfo.CreateNoWindow = false;
startInfo.WindowStyle = ProcessWindowStyle.Normal;
int id = Process.Start(startInfo).Id;
Log.LogMessageFromText($"The process is: {id}", MessageImportance.High);
]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
